pipeline {
    agent {label 'docker'}
    environment {
        dockerCred = credentials('dockerCred')
        dockerImage="$dockerCred_USR/$repoName"
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage ('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Nithishkumar0064/kubernetes-assignment.git'
            }
        }

        stage ('SonarQube Analysis'){
            steps {
                    sonar-scanner \
                      -Dsonar.projectKey=my_project \
                      -Dsonar.sources=. \
                      -Dsonar.java.binaries=. \
                      

                    }
                
                
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarToken' 
                }
            }
        }

        stage ('Docker Build') {
            steps {
                dir('Application-Code/frontend') { 
                        sh 'docker build -t $dockerImage:my-project .'
                }
                dir('Application-Code/backend') { 
                        sh 'docker build -t $dockerImage:my-project .'
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image -f json -o results-${BUILD_NUMBER}.json $dockerImage:my-project'
                 
            }
        }

        stage ('Docker Push') {
            steps {
                sh '''
                    echo "$dockerCred_PSW" | docker login --username $dockerCred_USR --password-stdin
                    docker push $dockerImage:my-project
                    docker image prune -a
                '''
            }
        }
        stage('Deploy to kubernetes') {
            steps {
                sh ' kubectl apply -f newpod.yml'
            }
            
        }
    }
}
